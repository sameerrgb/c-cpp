
/// Overriding, overloading, constructor in inheritance
/*
  Create a class FLOAT that contains one float data member. Overload all the four
  arithmetic operators so that they can operate on the objects of FLOAT
*/

#include<iostream>
using namespace std;

class Float
{
    private:
    float x;

    public:

    void setData(float y)
    {
        x = y;
    }
    void  getData()
    {
        cout<<"\n X:"<<x;
    }

    Float operator+(Float c)
    {
        Float temp;
        temp.x = x + c.x;
        return temp;
    }

    Float operator-(Float c)
    {
        Float temp;
        temp.x = x - c.x;
        return temp;
    }

    Float operator*(Float c)
    {
        Float temp;
        temp.x = x * c.x;
        return temp;
    }

    Float operator/(Float c)
    {
        Float temp;
        temp.x = x / c.x;
        return temp;
    }
};

int main()
{
    Float c1,c2,c3,c4,c5,c6;

    c1.setData(5);
    c2.setData(2);

    c3 = c1 + c2;
    c3.getData();

    c4 = c1 - c2;
    c4.getData();

    c5 = c1 * c2;
    c5.getData();

    c6 = c1 / c2;
    c6.getData();
    
    cout<<"\n\n";

    return 0;
}




/// Overriding, overloading, constructor in inheritance
/*
 Define a class Rectangle and overload area function for different types of data type.
*/

#include<iostream>
using namespace std;

class Rectangle
{
    public: 

    int area(int l,int b)
    {
        return l * b;
    }
    double area(double l,double b)
    {
        return l * b;
    }
    double area(int l,double b)
    {
        return l * b;
    }
    double area(double l,int b)
    {
        return l * b;
    }
    
};

int main()
{
    Rectangle r1,r2;
    
    cout<<"\n Area of r1 =   "<<r1.area(6.2,2);
    cout<<"\n\n";
    return 0; 
}





/// Overriding, overloading, constructor in inheritance
/*
 Define a base class Animals having member function sound() . Define another derived
 class from Animals class named Dogs. You need to override the sound function of the
 base class in the derived class.
*/

#include<iostream>
using namespace std;

class animal
{
    public:
    void sound()
    {
        cout<<"\n Animal Sound!!!";
    }
};

class dog : public animal
{
    public:
    void sound()
    {
        cout<<"\n Bark!!!";
    }
};

int main()
{
    dog d;
    d.sound();

    cout<<"\n\n";
    return 0;
}




/// Overriding, overloading, constructor in inheritance
/*
Define a class Addition that can add 2 or 3 numbers of different data types using
function overloading.
*/

#include<iostream>
using namespace std;

class addition
{
    public:

    int add(int a,int b,int c=0)
    {
        return a + b + c;
    }
    double add(double a,double b,double c=0)
    {
        return a + b + c;
    }
    double add(double a,int b,int c=0)
    {
        return a + b + c;
    }
    double add(double a,double b,int c=0)
    {
        return a + b + c;
    }
    double add(int a,double b,double c=0)
    {
        return a + b + c;
    }
    double add(int a,double b,int c=0)
    {
        return a + b + c;
    }
    double add(double a,int b,double c=0)
    {
        return a + b + c;
    }
};

int main()
{
    addition a;

    cout<<"\n Addition = "<<a.add(2,2.5,0);

    cout<<"\n\n";

    return 0;
}




/// Overriding, overloading, constructor in inheritance
/*
   Define a class A having multiple constructors. Define another class B derived from class
   A. Create derived class constructors and show use of constructor in this single inheritance
*/

#include<iostream>
using namespace std;

class A
{
   public:
    int x;
     A()
     {
        cout<<"\n DC of A";
     }

     A(int a)
     {
        x=a;
        cout<<"\n PC of A";
     }
     
};

class B : public A
{
    public:
    int y;
    B() : A()
     {
        cout<<"\n DC of B";
     }

     B(int b) : A(x)
     {
        y=b;
        cout<<"\n PC of B";
     }
};

int main()
{
    A a1,a2(1);
    B b1,b2(1);
    

    cout<<"\n\n";
    return 0;
}




/// Overriding, overloading, constructor in inheritance
/*
  C++ Program to illustrate the use of Constructors in multilevel inheritance of your choice
*/

#include<iostream>
using namespace std;

class A
{
   public:
    int x;
     A()
     {
        cout<<"\n DC of A";
     }

     A(int a)
     {
        x=a;
        cout<<"\n PC of A";
     }
     
};

class B : public A
{
    public:
    int y;
    B() : A()
     {
        cout<<"\n DC of B";
     }

     B(int b) : A(x)
     {
        y=b;
        cout<<"\n PC of B";
     }
};

class C : public B
{
    public:
    int z;
    C() : B()
     {
        cout<<"\n DC of C";
     }

     C(int c) : B(y)
     {
        z=c;
        cout<<"\n PC of C";
     }
};

int main()
{
    A a1,a2(1);
    B b1,b2(1);
    C c1,c2(1);
    

    cout<<"\n\n";
    return 0;
}





/// Overriding, overloading, constructor in inheritance
/*
   C++ Program to illustrate the use of Constructors in single inheritance of your choice.
*/


#include<iostream>
using namespace std;

class A
{
   public:
    int x;
     A()
     {
        cout<<"\n DC of A";
     }

     A(int a)
     {
        x=a;
        cout<<"\n PC of A";
     }
     
};

class B : public A
{
    public:
    int y;
    B() : A()
     {
        cout<<"\n DC of B";
     }

     B(int b) : A(x)
     {
        y=b;
        cout<<"\n PC of B";
     }
};

int main()
{
    A a1,a2(1);
    B b1,b2(1);
    

    cout<<"\n\n";
    return 0;
}




/// Overriding, overloading, constructor in inheritance
/*
  Write a C++ program to find the factorial of a number using copy constructor
*/

#include<iostream>
#include<cstring>
using namespace std;

class F
{
    public:
    float x;
    float f=1;
    
    F(int a)
    {
        x=a;
    }
    
    F( const F &a )
    {
        x = a.x;
       
        for(int i=1 ; i<=x; i++)
        {
            f = f*i;
        }       
    }

    void show()
    {
        cout<<"\n f = "<<f;
    }
    
};

int main()
{
    F f1(5);
    F f2 = f1; 
    f2.show();
   
   
    cout<<"\n\n";
    return 0;
}






/// Overriding, overloading, constructor in inheritance
/*
  Write a C++ program to calculate the area of triangle, rectangle and circle using
  constructor overloading. The program should be menu driven.
*/

#include <iostream>
#include<cstdlib>
#include <cmath>
using namespace std;

class area 
{
    private: 
       double ar;
    public:
      
    area(double r)
    {
        ar = M_PI * r * r; 
    }

    area(double l,double b)
    {
        ar = l * b;
    }

    area(double a,double b,double c)
    {
        double s;
        s = (a + b + c) / 2;
        ar = s * (s - a) * (s - b) * (s - c);
        ar = pow(ar , 0.5);
    }

    void display()
    {
        cout<<"\n    Area = "<<ar<<endl;
    }
    
};

int main() 
{
    int choice;
    double x,y,z;

    do {
        cout<<"================ Menu ================\n";
        cout<<"1. Area of Circle\n";
        cout<<"2. Area of Rectangle\n";
        cout<<"3. Area of Triangle\n";
        cout<<"4. Exit\n";
        cout<<"Enter your choice: ";
        cin>>choice;

        switch(choice) 
        {
            case 1:
            {
                cout<<"Enter radius of the circle: ";
                cin>>x;
                area a1(x);
                a1.display();
            }
            break;

            case 2:
            {
                cout<<"Enter length and width of the rectangle: ";
                cin>>x>>y;
                area a2(x,y);
                a2.display();
            }  
            break;

            case 3:
            {
                cout<<"Enter Sides of the Triangle: ";
                cin>>x>>y>>z;
                area a3(x,y,z);
                a3.display();
            }
            break;

            case 4:
            {
                cout<<"Exiting the program...\n";
            }
            break;
            
            default:
            {
                cout<<"Invalid choice! Please enter a valid option.\n";
            }     
        }
        cout<<"======================================\n";
    } while(choice != 4);

    return 0;
}






/// Overriding, overloading, constructor in inheritance
/*
Create a C++ class for player objects with the following attributes: player no., name,
number of matches and number of goals done in each match. The number of matches
varies for each player. Write a parameterized constructor which initializes player no.,
name, number of matches and creates an array for number of goals and number of
matches dynamically
*/

#include <iostream>
#include <string>
using namespace std;

class Player
{
    private:

       int player_no , no_of_matches;
       char player_name[100];
       int *goals;  

    public:
    
        Player()
        {
            int i;
            cout<<"\n    Enter Player Number:  ";
            cin>>player_no;
            cout<<"    Enter Player Name:  ";
            cin>>player_name;
            cout<<"    Enter Number of Matches:  ";
            cin>>no_of_matches;
            goals = new int [no_of_matches];

            for(i = 0; i <= no_of_matches - 1; i++)
            {
                cout<<"    Enter No. of Goals of Matches "<<i+1<<"  :  ";
                cin>>goals[i];
            }
        }

        void display()
        {
            int i;
            cout<<"\n    Player Number:  "<<player_no<<endl;
            cout<<"    Player Name:  "<<player_name<<endl;
            cout<<"    Number of Matches:  "<<no_of_matches<<endl;
        
            for(i = 0; i <= no_of_matches - 1; i++)
            {
                cout<<"    Goals of Matches "<<i+1<<"  :  "<<goals[i]<<endl;
            }
        }
            
};

int main()
{   
    Player p;
    system("cls");
    p.display();

    return 0;
}
